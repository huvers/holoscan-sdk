diff --git a/public/examples/holoviz/python/holoviz_geometry.py b/public/examples/holoviz/python/holoviz_geometry.py
index 2b00e3dcb..821a74664 100644
--- a/public/examples/holoviz/python/holoviz_geometry.py
+++ b/public/examples/holoviz/python/holoviz_geometry.py
@@ -22,7 +22,13 @@ from argparse import ArgumentParser
 import numpy as np

 from holoscan.core import Application, Operator, OperatorSpec
-from holoscan.operators import HolovizOp, VideoStreamReplayerOp
+from holoscan.operators import (
+    FormatConverterOp,
+    HolovizOp,
+    VideoStreamRecorderOp,
+    VideoStreamReplayerOp,
+)
+from holoscan.resources import UnboundedAllocator

 sample_data_path = os.environ.get("HOLOSCAN_INPUT_PATH", "../data")

@@ -302,11 +308,30 @@ class MyVideoProcessingApp(Application):
                     text=["label_1", "label_2"],
                 ),
             ],
+            enable_render_buffer_output=True,
         )
         self.add_flow(source, visualizer, {("output", "receivers")})
         self.add_flow(image_processing, visualizer, {("outputs", "receivers")})
         self.add_flow(image_processing, visualizer, {("output_specs", "input_specs")})

+        recorder_format_converter = FormatConverterOp(
+            self,
+            name="recorder_format_converter",
+            in_dtype="rgba8888",
+            out_dtype="rgb888",
+            pool=UnboundedAllocator(self, name="pool"),
+        )
+        recorder = VideoStreamRecorderOp(
+            self, name="recorder", directory="RECORDING_DIR", basename="SOURCE_VIDEO_BASENAME"
+        )
+
+        visualizer.add_arg(allocator=UnboundedAllocator(self, name="allocator"))
+
+        self.add_flow(
+            visualizer, recorder_format_converter, {("render_buffer_output", "source_video")}
+        )
+        self.add_flow(recorder_format_converter, recorder)
+

 def main(config_count):
     app = MyVideoProcessingApp(config_count=config_count)
