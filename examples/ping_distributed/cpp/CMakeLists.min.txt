# SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the \"License\");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an \"AS IS\" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required(VERSION 3.20)
project(holoscan_ping_distributed CXX)

# Finds the package holoscan
find_package(holoscan REQUIRED CONFIG
             PATHS "/opt/nvidia/holoscan" "/workspace/holoscan-sdk/install")

add_executable(ping_distributed
  ping_distributed.cpp
)

target_link_libraries(ping_distributed
  PRIVATE
  holoscan::core
  holoscan::ops::ping_tensor_tx
  holoscan::ops::ping_tensor_rx
)

# Testing
if(BUILD_TESTING)
  # For iGPU, a call to `ucp_init_version` with CUDA_VISIBLE_DEVICES="" seems to cause a segfault.
  # Limit the following test case to x86_64 systems to avoid this.
  if(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|amd64")
    # emulate a x86_64 system without any GPUs by setting CUDA_VISIBLE_DEVICES=""
    add_test(NAME EXAMPLE_CPP_PING_DISTRIBUTED_CPU_ONLY_TEST
      COMMAND ${CMAKE_CURRENT_BINARY_DIR}/ping_distributed
      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    )
    set_tests_properties(EXAMPLE_CPP_PING_DISTRIBUTED_CPU_ONLY_TEST PROPERTIES
      ENVIRONMENT "CUDA_VISIBLE_DEVICES="
      PASS_REGULAR_EXPRESSION "no CUDA-capable device is detected"
      PASS_REGULAR_EXPRESSION "rx received message 10: Tensor key: 'tensor', shape: \\(32, 64\\)"
      FAIL_REGULAR_EXPRESSION "initialized independent of a parent entity"
    )
  endif()

  # test with CPU tensors, but don't explicitly make the GPU not visible
  add_test(NAME EXAMPLE_CPP_PING_DISTRIBUTED_CPU_TEST
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/ping_distributed
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
  )
  set_tests_properties(EXAMPLE_CPP_PING_DISTRIBUTED_CPU_TEST PROPERTIES
    PASS_REGULAR_EXPRESSION "rx received message 10: Tensor key: 'tensor', shape: \\(32, 64\\)"
  )

  # test with GPU tensors
  add_test(NAME EXAMPLE_CPP_PING_DISTRIBUTED_GPU_TEST
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/ping_distributed --gpu
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
  )
  set_tests_properties(EXAMPLE_CPP_PING_DISTRIBUTED_GPU_TEST PROPERTIES
    PASS_REGULAR_EXPRESSION "rx received message 10: Tensor key: 'tensor', shape: \\(32, 64\\)"
    FAIL_REGULAR_EXPRESSION "initialized independent of a parent entity"
  )

  add_test(NAME EXAMPLE_CPP_PING_DISTRIBUTED_FLOW_TRACKING_TEST
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/ping_distributed --track
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
  )
  set_tests_properties(EXAMPLE_CPP_PING_DISTRIBUTED_FLOW_TRACKING_TEST PROPERTIES
    PASS_REGULAR_EXPRESSION "Data Flow Tracking Results"
    PASS_REGULAR_EXPRESSION "Fragment: fragment2"
    PASS_REGULAR_EXPRESSION "Fragment: fragment1"
  )

  add_test(NAME EXAMPLE_CPP_PING_DISTRIBUTED_HELP_STRING_TEST
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/ping_distributed --help
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
  )
  set_tests_properties(EXAMPLE_CPP_PING_DISTRIBUTED_HELP_STRING_TEST PROPERTIES
    PASS_REGULAR_EXPRESSION "Usage: ping_distributed \\[OPTIONS\\]"
  )
endif()
